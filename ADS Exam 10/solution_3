package weblab;

import java.util.*;

class SolutionHashSet {

    public ArrayList<ArrayList<String>> table;

    public int capacity;

    /**
     * Constructs a new SolutionHashSet.
     *
     * Capacity of the hash set can not be 0 or negative.
     *
     * @param capacity
     *     to be used as capacity of the table.
     * @throws IllegalArgumentException
     *     if the input capacity is invalid.
     */
    public SolutionHashSet(int capacity) {
        if (capacity <= 0) {
            throw new IllegalArgumentException("Capacity needs to be positive.");
        }
        this.capacity = capacity;
        this.table = new ArrayList<>(capacity);
        for (int i = 0; i < capacity; i++) {
            table.add(new ArrayList<>());
        }
    }

    /**
     * Add a new key to the hash set,
     * uses separate chaining to deal with collisions.
     *
     * If the key is null, nothing should be added.
     *
     * @param key The key to add.
     */
    public void add(String key) {
        if(key == null) {
            return;
        }
        int hash = hash(key);
        List<String> current = table.get(hash);
        if(current.contains(key)) {
            return;
        } else {
            current.add(key);
        }
    }

    /**
     * Remove the key from the hash set, if it is present.
     *
     * @param key The key to remove.
     */
    public void remove(String key) {
        if(key == null) {
            return;
        }
        int hash = hash(key);
        List<String> current = table.get(hash);
        if(current.contains(key)) {
            current.remove(key);
        } 
    }

    /**
     * Check if the hash set contains the key.
     *
     * @param key
     *     String representing the key of the entry to look for.
     * @return true iff this key is found in the hash set, else false.
     */
    public boolean contains(String key) {
        if(key == null) {
            return false;
        }
        int hash = hash(key);
        List<String> current = table.get(hash);
        if(current.contains(key)) {
            return true;
        }
        return false; 
    }

    /**
     * Hashes a string representing a key
     *
     * @param key
     *     String that needs to be hashed.
     * @return the hashcode of the string, modulo the capacity of the SolutionHashSet.
     */
    public int hash(String key) {
        return Math.abs(key.hashCode()) % capacity;
    }
}
